Generate a README.md explaining this project.

Files:
backend.tf
LICENSE
main.tf
outputs.tf
provider.tf
variables.tf

Code Samples:
\n\n--- File: ./outputs.tf ---\noutput "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.this.id
}

output "public_subnet_id" {
  description = "List of public subnet IDs"
  #   value = values(aws_subnet.public[*]).id
  value = [for s in values(aws_subnet.public) : s.id]
}

output "private_subnet_id" {
  description = "list of private subnet ID"
  #   value = values(aws_subnet.private)[*].id
  value = [for s in values(aws_subnet.private) : s.id]
}\n\n--- File: ./main.tf ---\nresource "aws_vpc" "this" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "tf-networking-vpc"
  }
}

resource "aws_subnet" "public" {
  for_each                = toset(var.public_subnet_cidr)
  vpc_id                  = aws_vpc.this.id
  cidr_block              = each.value
  map_public_ip_on_launch = true
  tags = {
    Name = "tf-public-${each.key}"
  }
}

resource "aws_subnet" "private" {
  for_each   = toset(var.private_subnet_cidr)
  vpc_id     = aws_vpc.this.id
  cidr_block = each.value
  tags = {
    Name = "tf-private-${each.key}"
  }

}

resource "aws_security_group" "ssh" {
  name        = "tf-ssh-sg"
  description = "Allows SSH access"
  vpc_id      = aws_vpc.this.id

  ingress  {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr]
  }

  egress  {
    from_port   = 0
    to_port     = 0
    protocol    = -1
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "tf-ssh-sg"
  }
}\n\n--- File: ./variables.tf ---\nvariable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
  validation {
    condition     = can(regex("^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]+$", var.vpc_cidr))
    error_message = "allowed CIDR must be valid CIDR"
  }
}

variable "public_subnet_cidr" {
  description = "List of CIDR for public subnets"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24"]

  validation {
    condition     = length(var.public_subnet_cidr) > 0
    error_message = "You must supply atleast one public CIDR"
  }
}

variable "private_subnet_cidr" {
  description = "List of CIDR for private subnets"
  type        = list(string)
  default     = ["10.0.3.0/24", "10.0.4.0/24"]

  validation {
    condition     = length(var.private_subnet_cidr) > 0
    error_message = "You must supply atleast one private CIDR"
  }
}\n\n--- File: ./provider.tf ---\nterraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "ap-south-1"
}\n\n--- File: ./backend.tf ---\nterraform {
  backend "s3" {
    bucket = "mk-tf-state-bucket"
    key = "terraform-network-module/terraform.tfstate"
    region = "ap-south-1"
    dynamodb_table = "mk-tf-locks"
    encrypt = true
  }
}
